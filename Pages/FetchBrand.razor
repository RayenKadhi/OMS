@page "/brandlist"

<div class="row">
    <div class="col-md-6 d-flex align-items-end justify-content-start">
        <h3> Number of Brand: @totalRecords </h3>
    </div>
    <div class="col-md-6 d-flex align-items-end justify-content-end">
        <RadzenButton class="button-Add-New" Icon="add_circle_outline" Click="@InsertRow" Style="background-color:	#FF9900;" Text="Add New brand" Disabled="@isButtonDisabled"></RadzenButton>
    </div>
</div>



@if (brands == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (brands == null || brands.Count == 0)
    {
        <tr>
            <td colspan="3">No Records to display</td>
        </tr>
    }
    else
    {
        <RadzenDataGrid @ref=brandGrid Density="Density.Compact" AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="20" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                        Data="@brands" TItem="Brand" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" RowCreate="@OnCreateRow" RowUpdate="@OnUpdateRow" EditMode="DataGridEditMode.Single" Style="margin-top:20px">
            <Columns>
                <RadzenDataGridColumn TItem="Brand" Property="BrandName" Title="Brand" Width="200px">
                    <EditTemplate Context="brand">
                        <RadzenTextBox Placeholder="Name.." @bind-Value="@brand.BrandName" Style="width:100%" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="Brand" Title="Actions" Width="100px">
                    <Template Context="brand">
                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall" Click="@(args => EditRow(brand))" @onclick:stopPropagation="true">
                        </RadzenButton>
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.ExtraSmall" class="my-0 ms-1" Click="@(args => ShowInlineDialog(brand))">
                        </RadzenButton>
                    </Template>
                    <EditTemplate Context="brand">

                        <RadzenButton Icon="check" ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall" Click="@((args) => SaveRow(brand))">
                        </RadzenButton>
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="cancel" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.ExtraSmall" class="my-1 ms-1" Click="@(args => CancelEdit(brand))">
                        </RadzenButton>

                    </EditTemplate>

                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    }
}
@implements IDisposable
@code {
    RadzenDataGrid<Brand> brandGrid;
    Brand brandToInsert;
    Brand brandToUpdate;
    bool isButtonDisabled;
    bool? isConfirmed;
    List<Brand> brands;
    private string searchTerm;
    private string SearchTerm
    {
        get { return searchTerm; }
        set { searchTerm = value; }
    }
    int totalRecords;
    string sortColumnName = "BrandName";
    string sortDir = "ASC";

    protected override async Task OnInitializedAsync()
    {
        totalRecords = await brandService.Count();
        brands = await brandService.ListAll(sortColumnName, sortDir, searchTerm);
    }
    public void Dispose()
    {
        if (dialogService != null && dialogService.Close != null)
        {
            dialogService.Close();
        }
    }
    void OnCreateRow(Brand brand)
    {
        brandService.Create(brand);
    }
    void OnUpdateRow(Brand brand)
    {
        brandService.Update(brand);
    }
    async Task InsertRow()
    {
        brandToInsert = new Brand();
        await brandGrid.InsertRow(brandToInsert);
        isButtonDisabled = true;
    }
    async Task EditRow(Brand brand)
    {
        brandToUpdate = brand;
        await brandGrid.EditRow(brand);
        isButtonDisabled = true;

    }

    async Task Delete(Brand brand)
    {

        if (brand == null)
        {
            return;
        }
        try
        {
            await brandService.Delete(brand.BrandId);
            dialogService.Close(true);
            await OnInitializedAsync();

        }
        catch (SqlException ex)
        {
            if (ex.Number == 547)
            {
                WarningMessage($"{brand.BrandName} has associated products. You cannot delete this brand.");
                dialogService.Close(true);
            }
        }
    }

    async Task ShowInlineDialog(Brand brand)
    {
        var result = await dialogService.OpenAsync("Confirmation", ds =>
    @<RadzenStack Gap="1.5rem">
        <p>Are you sure to delete <b>@brand.BrandName</b> from your list?</p>
        <div class="custom-button-group">
            <RadzenButton Text="Ok" Click="((args) => Delete(brand))" Style="width: 80px;" ButtonStyle="ButtonStyle.Success" />
            <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Danger" />
        </div>
    </RadzenStack>);
    }
    async Task SaveRow(Brand brand)
    {
        if (string.IsNullOrEmpty(brand.BrandName))
        {
            WarningMessage("Brand Name is Required");
            isButtonDisabled = false;
            return;
        }
        if (brands.FirstOrDefault(c => c.BrandName == brand.BrandName && c.BrandId != brand.BrandId) != null)
        {
            WarningMessage("Brand Name already exists");
            isButtonDisabled = false;
            return;
        }

        brandGrid.UpdateRow(brand);
        OnInitializedAsync();
        isButtonDisabled = false;
    }
    void WarningMessage(string messsage)
    {
        ShowNotification(new NotificationMessage { Summary = messsage, Duration = 4000 });
    }
    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
        OnInitializedAsync();
    }
    void CancelEdit(Brand brand)
    {
        brandGrid.CancelEditRow(brand);
        isButtonDisabled = false;
        OnInitializedAsync();
    }

}