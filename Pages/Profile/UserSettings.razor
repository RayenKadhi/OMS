@page "/settings"


<style>

	.rz-p-12 {
		padding: 1rem !important;
	}

	.hover-pointer {
		cursor: pointer;
		border: 2px solid #000;
	}

		.hover-pointer:hover {
			border-color: #007bff;
		}

		.hover-pointer.selected {
			border-color: #007bff;
		}

	.Image-Selected {
		border: 2px solid #007bff;
	}

	.form-labels {
		color: #ebebeb
	}

	.no-class {
		margin-top: 1em;
	}
</style>

<RadzenCard class="card">

	<h3 class="page-title">Edit profile</h3>

	@if (CurrentStep == 0)
	{
		<p>Username</p>
		<RadzenTextBox class="TextBox" @bind-value="@user.Username" />
		<span>
			<RadzenCheckBox @bind-Value=@value style="margin-top:1em;" Name="CheckBox1" />
			<RadzenLabel Text="Change Password?" Component="CheckBox1" Style="margin-left: 8px; vertical-align: middle; margin-top:1em;" />
		</span>

		@if (value == true)
		{
			valuePassword = false;
		}
		else
		{
			valuePassword = true;
		}
		<p class="@label_class()" style="margin-top:1em;">Actual Password</p>
		<RadzenPassword class="TextBox" Disabled="@valuePassword" Visible=true @bind-Value="@user.ActualPassword" />
		<p class="@label_class()">New Password</p>
		<RadzenPassword Disabled="@valuePassword" class="TextBox" Visible=true @bind-Value="@user.NewPassword" />
		<p class="@label_class()">Confirm Password</p>
		<RadzenPassword Disabled="@valuePassword" class="TextBox" Visible=true @bind-value="@user.ConfirmPassword" />
	}
	@if (CurrentStep != 0)
	{
		<div style=margin-left:20%>
			<div class="d-flex flex-row" style="margin-top: .5em;">
				<div class="p-2">
					<RadzenImage @ref="Avatar1" Path="/Images/Avatar1.png" style="width: 150px; height: 150px; border-radius: 16px; margin-right: 6px;" @onclick="() => SelectedImage(Avatar1)" class="@className" />
				</div>
				<div class="p-2">
					<RadzenImage @ref="Avatar2" Path="/Images/Avatar2.png" style="width: 150px; height: 150px; border-radius: 16px; margin-right: 6px;" @onclick="() => SelectedImage(Avatar2)" class="@className" />
				</div>
				<div class="p-2">
					<RadzenImage @ref="Avatar3" Path="/Images/Avatar3.png" style="width: 150px; height: 150px; border-radius: 16px; margin-right: 6px;" @onclick="() => SelectedImage(Avatar3)" class="@className" />
				</div>
			</div>
			<div class="row" style="margin-top: .5em;">

				<div style="margin-left:.5em; gap:1em;" class="col-md-6 d-flex align-items-end justify-content-start">
					<RadzenImage @ref="Avatar4" Path="/Images/Avatar4.png" style="width: 150px; height: 150px; border-radius: 16px; margin-right: 6px;" @onclick="() => SelectedImage(Avatar4)" class="@className" />
					<RadzenImage @ref="Avatar0" Path="/Images/None.png" style="width: 150px; height: 150px; border-radius: 16px; margin-right: 6px;" @onclick="(() =>  SelectedImage(Avatar0))" class="@className" />
				</div>
			</div>
		</div>

	}

	<div class="row" style="margin-top: .5em;">
		<div class="col-md-6 d-flex align-items-end justify-content-start">
			<RadzenButton hidden="@hiddenPrevious" Disabled="@DisabledPrevious" Size="ButtonSize.ExtraSmall" Click="@((args) => MoveToNextStep())" ButtonStyle="ButtonStyle.Light"><RadzenImage Path="/Images/right.svg" width="16" height="16" /></RadzenButton>
		</div>
		<div class="col-md-6 d-flex align-items-end justify-content-end">
			<RadzenButton Disabled="@DisabledNext" Size="ButtonSize.ExtraSmall" Click="((args) => MoveToPreviousStep())" ButtonStyle="ButtonStyle.Light"> <RadzenImage Path="/Images/left.svg" width="16" height="16" /> </RadzenButton>
		</div>
	</div>
	<div class="custom-button-group" style="padding-top:0;margin-top:0;">

		<RadzenButton Text="Save" Click="@((args)=>SaveUser(user))" Icon="save" ButtonStyle="ButtonStyle.Success" class="add-button" Style="margin-top:2em;" />

		<RadzenButton Text="Cancel" Click="@Navigation" Icon="cancel" ButtonStyle="ButtonStyle.Danger" class="cancel-button" Style="margin-top:2em;" />

	</div>

</RadzenCard>


@code {
	bool value = false;
	bool valuePassword;
	string userinfo;
	int userid;
	User user = new User();
	User userInfoOld = new User();
	List<User> users;
	string key = "UserInfo";
	User userInfo = new User();


	protected override async Task OnInitializedAsync()
	{
		users = await userService.ListAll();
		userinfo = await localStorage.GetItemAsync<string>("UserInfo");
		userInfoOld = await localStorage.GetItemAsync<User>("UserInfo");
		dynamic userObject = JsonConvert.DeserializeObject(userinfo);
		userid = userObject.UserId;
		user = await userService.GetById(userid);

	}

	async Task SaveUser(User user)
	{
		string ActualUsername = user.Username;
		string ActualPassword = user.Password;
		string ActualLocalStoragePassword = userInfoOld.Password;
		string ActualAvatar = user.Avatar;

		if (string.IsNullOrEmpty(user.Username))
		{
			WarningMessage("Username is Required");
			return;
		}
		if (user.UserNameChanged == 2 && ActualUsername != userInfoOld.Username)
		{
			WarningMessage("Username could not be changed more than 2 times");
			return;
		}
		if (users.FirstOrDefault(u => u.Username == user.Username) != null)
		{
			if (user.Username == ActualUsername) { }
			else
			{
				WarningMessage("Username already exists");
				return;
			}

		}
		if (!valuePassword)
		{
			if (string.IsNullOrEmpty(user.ActualPassword))
			{
				WarningMessage("Password is Required");
				return;
			}

			if (!BCrypt.Verify(user.ActualPassword, ActualPassword))
			{
				WarningMessage("Password is not correct");
				return;
			}
		}

		if (string.IsNullOrEmpty(user.NewPassword) && !valuePassword)
		{
			WarningMessage("Password is Required");
			return;
		}
		if (string.IsNullOrEmpty(user.ConfirmPassword) && value == true)
		{
			WarningMessage("Password Confirmation is Required");
			return;
		}
		if (user.ConfirmPassword != user.NewPassword && !valuePassword)
		{
			WarningMessage("Password is not correct");
			return;
		}
		userInfo.UserId = user.UserId;
		if (string.IsNullOrEmpty(UserAvatar))
		{
			userInfo.Avatar = ActualAvatar;
		}
		else
		{
			userInfo.Avatar = UserAvatar;
			user.Avatar = UserAvatar;
		}
		userInfo.Suspended = 1;
		userInfo.Username = user.Username;
		userInfo.Password = ActualLocalStoragePassword;
		await localStorage.SetItemAsync(key, userInfo);
		if (user.NewPassword != null)
		{
			string NewpasswordHash = BCrypt.HashPassword(user.NewPassword);
			if (!valuePassword)
			{
				user.Password = NewpasswordHash;
				userInfo.Password = user.NewPassword;
			}

			await localStorage.SetItemAsync(key, userInfo);
			ActualLocalStoragePassword = userInfo.Password;

		}
		else
		{
			user.Password = user.Password;
		}

		if (userInfoOld.Username != user.Username)
		{
			user.UserNameChanged = user.UserNameChanged + 1;
		}
		await userService.Update(user);
		if (!BCrypt.Verify(ActualLocalStoragePassword, ActualPassword) || ActualUsername != userInfoOld.Username || userInfo.Avatar != ActualAvatar)
		{
			if (ActualUsername != userInfoOld.Username || userInfo.Avatar != ActualAvatar)
			{
				navigationManager.NavigateTo("/home");
			}
			if (!BCrypt.Verify(ActualLocalStoragePassword, ActualPassword))
			{
				
				navigationManager.NavigateTo("/logout");
			}
			SuccessMessage("User Is Updated");
		}
		else
		{
			InfoMessage("No changes done");
			navigationManager.NavigateTo("/home");
		}
	}
	void WarningMessage(string messsage)
	{
		ShowNotification(new NotificationMessage { Summary = messsage, Duration = 4000 });
	}

	void ShowNotification(NotificationMessage message)
	{
		NotificationService.Notify(message);
	}
	void SuccessMessage(string messsage)
	{
		ShowNotificationSuccess(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = messsage, Duration = 4000 });
	}
	void InfoMessage(string messsage)
	{
		ShowNotificationSuccess(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = messsage, Duration = 4000 });
	}
	void ShowNotificationSuccess(NotificationMessage message)
	{
		NotificationService.Notify(message);

	}
	public void Navigation()
	{
		navigationManager.NavigateTo("/home");
	}
	bool IsValidEmail(string email)
	{
		Regex emailRegex = new Regex(@"^([\w\.\-]+)@([\w\-]+)((\.(\w){2,3})+)$", RegexOptions.IgnoreCase);
		return emailRegex.IsMatch(email);
	}
	//----------------------------------------------------------------------------------------------------->
	int CurrentStep = 0;
	private RadzenImage Avatar0;
	private RadzenImage Avatar1;
	private RadzenImage Avatar2;
	private RadzenImage Avatar3;
	private RadzenImage Avatar4;
	string className = "hover-pointer";
	string UserAvatar;
	bool hiddenPrevious = true;
	bool DisabledNext;
	bool DisabledPrevious;
	private async void SelectedImage(RadzenImage image)
	{
		await DeselectAllImages();
		await ToggleImageSelected(image, true);
		SetUserAvatar(image);
	}

	private async Task DeselectAllImages()
	{
		await ToggleImageSelected(Avatar0, false);
		await ToggleImageSelected(Avatar1, false);
		await ToggleImageSelected(Avatar2, false);
		await ToggleImageSelected(Avatar3, false);
		await ToggleImageSelected(Avatar4, false);
	}

	private async Task ToggleImageSelected(RadzenImage image, bool isSelected)
	{
		var element = await jsRuntime.InvokeAsync<IJSObjectReference>("eval", $"document.getElementById('{image.UniqueID}')");
		await element.InvokeVoidAsync("classList.toggle", "Image-Selected", isSelected);
	}

	private void SetUserAvatar(RadzenImage image)
	{
		if (image == Avatar0)
		{
			UserAvatar = "/Images/None.png";
		}
		else if (image == Avatar1)
		{
			UserAvatar = "/Images/Avatar1.png";
		}
		else if (image == Avatar2)
		{
			UserAvatar = "/Images/Avatar2.png";
		}
		else if (image == Avatar3)
		{
			UserAvatar = "/Images/Avatar3.png";
		}
		else if (image == Avatar4)
		{
			UserAvatar = "/Images/Avatar4.png";
		}
	}
	public void MoveToNextStep()
	{
		CurrentStep++;
		DisabledNext = false;
		DisabledPrevious = true;
		hiddenPrevious = true;
	}

	public void MoveToPreviousStep()
	{
		CurrentStep--;
		DisabledNext = true;
		DisabledPrevious = false;
		hiddenPrevious = false;
	}
	public string label_class()
	{
		if (!valuePassword)
		{
			return "no-class";
		}
		return "form-labels";
	}
}