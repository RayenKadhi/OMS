@page "/customerlist"
<link href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0
/css/font-awesome.min.css" rel="stylesheet">



<style>
    .Add-New-Customer{
        margin-left:45%; 
    }
</style>




<div class="row">
    <div class="col-md-6 d-flex align-items-end justify-content-start">
        <h3> Number of Customers: @totalRecords </h3>
    </div>
    <div class="col-md-6 d-flex align-items-end justify-content-end">
        <RadzenButton class="Add-New-Customer" Icon="add_circle_outline" Style="background-color:	#FF9900;" Text="Add New Customer" Click="@InsertRow" Disabled="@isButtonDisabled"></RadzenButton>
    </div>
</div>



@if (customers == null)
{
   <p><em>Loading...</em></p>
}
else
{
            @if (customers == null || customers.Count == 0)
         {
            <tr>
               <td colspan="3">No Records to display</td>
        </tr>
    }
    else
    {
        <RadzenDataGrid Density="Density.Compact" @ref="customerGrid" AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="20" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                        Data="@customers" TItem="Customer" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" RowCreate="@OnCreateRow" RowUpdate="@OnUpdateRow" EditMode="DataGridEditMode.Single" Style="margin-top:20px">
                    <Columns>
                        
                        <RadzenDataGridColumn TItem="Customer" Property="CustomerName" Title="Customer Name"  Width="180px">
                    <EditTemplate Context="customer">

                        <RadzenTextBox Placeholder="Name.." @bind-Value="@customer.CustomerName" Style="width:100%" />

                            </EditTemplate>
                            
                        </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Customer" Property="Email" Title="Email" Width="200px">
                    <EditTemplate Context="customer">
                        <RadzenTextBox Placeholder="Email.." @bind-Value="@customer.Email" Style="width:100%" />
                    </EditTemplate>
                </RadzenDataGridColumn>
              
                <RadzenDataGridColumn TItem="Customer" Property="Mobile" Title="Mobile" Width="200px">
                    <EditTemplate Context="customer">
                        <RadzenTextBox Placeholder="Mobile.." @bind-Value="@customer.Mobile" Style="width:100%" />

                    </EditTemplate>
                </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="Customer" Property="Address" Title="Address" Width="160px">
                    <EditTemplate Context="customer">
                            <RadzenTextArea Placeholder="Address.." @bind-Value="@customer.Address" Style="width:100%" />
                    </EditTemplate>

                </RadzenDataGridColumn>

                        <RadzenDataGridColumn TItem="Customer" Title="Actions" Width="100px">
                    <Template Context="customer">
                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall" Click="@(args => EditRow(customer))"  @onclick:stopPropagation="true">
                        </RadzenButton>
                        <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="info" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.ExtraSmall" class="my-0 ms-1" Click="@((args) => Navigation(customer))">
                        </RadzenButton>
                        <RadzenButton  ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.ExtraSmall" class="my-0 ms-1" Click="@(args => ShowConfirmationDialog(customer))">
                        </RadzenButton>
                    </Template>
                    <EditTemplate Context="customer">
                        
                            <RadzenButton Icon="check" ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.ExtraSmall" Click="@((args) => SaveRow(customer))">
                            </RadzenButton>
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="cancel" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.ExtraSmall" class="my-1 ms-1" Click="@(args => CancelEdit(customer))">
                            </RadzenButton>
                        
                    </EditTemplate>
                        </RadzenDataGridColumn>         
                    </Columns>
                </RadzenDataGrid>
         } 
}

   
@code {
 
    List<Entities.Customer> customers;
    private string searchTerm;
    private string SearchTerm
    {
        get { return searchTerm; }
        set { searchTerm = value; }
    }
    

    int totalRecords;
    string sortColumnName = "CustomerId";
    string sortDir = "DESC";


    protected override async Task OnInitializedAsync()
    {
        totalRecords = await customerService.Count();
        customers = await customerService.ListAll( sortColumnName, sortDir, searchTerm);
    }

    @code {
        Customer customerToInsert;
        Customer customerToUpdate;
        void Reset()
        {
            customerToInsert = null;
            customerToInsert = null;
        }
        RadzenDataGrid<Customer> customerGrid;

        bool isButtonDisabled;
        async Task InsertRow()
        {
            customerToInsert = new Customer();
            await customerGrid.InsertRow(customerToInsert);
            isButtonDisabled = true;
        }
        bool OnEditing = false;
        async Task EditRow(Customer customer)
        {
            customerToUpdate = customer;
            await customerGrid.EditRow(customer);
            OnEditing = true;

        }

        bool IsValidEmail(string email)
        {
            Regex emailRegex = new Regex(@"^([\w\.\-]+)@([\w\-]+)((\.(\w){2,3})+)$", RegexOptions.IgnoreCase);
            return emailRegex.IsMatch(email);
        }

        void WarningMessage(string messsage)
        {
            ShowNotification(new NotificationMessage { Summary = messsage, Duration = 4000 });
        }

        async Task SaveRow(Customer customer)
        {
            if (string.IsNullOrEmpty(customer.CustomerName))
            {
                WarningMessage("Customer Name is Required");
                return;
            }
            if (customers.FirstOrDefault(c => c.CustomerName == customer.CustomerName && c.CustomerId != customer.CustomerId) != null)
            {
                WarningMessage("Customer Name already exists");
                return;
            }
            if (!string.IsNullOrEmpty(customer.Email) && !IsValidEmail(customer.Email))
            {
                WarningMessage("Provide a valid email");
                return;
            }  
            customerGrid.UpdateRow(customer);
            OnInitializedAsync();
            isButtonDisabled = false;
            OnEditing = false;

        }
        void OnCreateRow(Customer customer)
        {
            customerService.Create(customer);
        }
        void OnUpdateRow(Customer customer)
        {
            Reset();
            customerService.Update(customer);
        }
        void CancelEdit(Customer customer)
        {
            customerGrid.CancelEditRow(customer);
            isButtonDisabled = false;
            OnInitializedAsync();
            OnEditing = false;
        }
        bool? isConfirmed;



        async Task ShowConfirmationDialog(Customer customer)
        {
            if (customer == null)
            {
                return;
            }


            isConfirmed = await DialogService.Confirm($"Are you sure to delete {customer.CustomerName} from your list? ", "Confirmation", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });
            try
            {
                if (isConfirmed == true)
                {

                    customerService.Delete(customer.CustomerId);
                    OnInitializedAsync();
                }
            } 
            catch (SqlException ex)
            {
                if (ex.Number == 547)
                {
                    WarningMessage($"Customer {customer.CustomerName} has associated orders. You cannot delete this customer.");
                }
            }
        }
        void ShowNotification(NotificationMessage message)
        {
            NotificationService.Notify(message);
            OnInitializedAsync();

        } 

        public void Navigation(Customer customer)
        {
            navigationManager.NavigateTo($"/CustomerInfo/{customer.CustomerId}");
        }
    }
}
