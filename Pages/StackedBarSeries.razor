<style>
    .rz-bar-series.rz-series-0 .rz-series-data-label {
        position: absolute;
        left: 100%;
        top: 50%;
        transform: translate(5px, -50%); 
    }
</style>

    <RadzenChart SeriesClick=@OnSeriesClick style="height: 400px" ColorScheme="ColorScheme.Divergent">
        <p class="page-title" style="font-weight: lighter; display:flex; justify-content:center">Top Five Customers</p>
        <div class="d-flex flex-row-reverse" style="margin-top:1em;">
            <RadzenDropDown Data="@Number" TextProperty="Num" ValueProperty="Num" @bind-Value="selectedNum" Change="@(e => OnYearSelectionChange((int)e))" />
        </div>

        @foreach (var num in Number)
        {
            if (selectedNum == num.Num)
            {
                <RadzenBarSeries  Data="@GetTopData(num.Num)" CategoryProperty="CustomerName" Title="Total Amount Spent in TND" ValueProperty="TotalPrice">
                <RadzenSeriesDataLabels Visible="true"  />
                </RadzenBarSeries>
                <RadzenValueAxis Formatter="@FormatAsDT" Min="@(GetMinValue(num.Num))" Max="@(GetMaxValue(num.Num))" Step="@(GetStepValue(num.Num))">
                    <RadzenGridLines Visible="false"  />
                </RadzenValueAxis>
            }
        }
        <RadzenBarOptions Radius="5" Height="20" />
    </RadzenChart>



@code{
    private int selectedNum = 5;
    List<TopFive> topFive;
    List<TopFive> topThree;
    List<TopFive> topTen;
    bool smooth = true;

    protected override async Task OnInitializedAsync()
    {
        topFive = GetTopRecords(5);
        topThree = GetTopRecords(3);
        topTen = GetTopRecords(10);
    }

    List<TopFive> GetTopRecords(int count)
    {
        string sqlQuery = $"SELECT * FROM GetTopRecordsFunction({count});";
        return dapperService.GetAll<TopFive>(sqlQuery, null);
    }

    void OnSeriesClick(SeriesClickEventArgs args)
    {

    }

    class DataItem_
    {
        public string Date { get; set; }
        public double Revenue { get; set; }
    }

    string FormatAsUSD(object value)
    {
        return ((double)value).ToString("C", CultureInfo.CreateSpecificCulture("ar-TN"));

    }

    string FormatAsMonth(object value)
    {
        if (value != null)
        {
            return Convert.ToDateTime(value).ToString("MMM");
        }

        return string.Empty;
    }

    string FormatAsDT(object value)
    {
        double num = (double)value;

        return num.ToString("0");
    }

    private class TopModel
    {
        public int Num { get; set; }
    }
    private List<TopModel> Number = new List<TopModel>
        {
            new TopModel { Num = 5 },
            new TopModel { Num = 3 },
            new TopModel { Num = 10 }
        };

    List<TopFive> GetTopData(int num)
    {
        return num switch
        {
            5 => topFive,
            3 => topThree,
            10 => topTen,
            _ => new List<TopFive>(), 
        };
    }
    int GetMinValue(int num)
    {
        return num switch
        {
            5 => 1200,
            3 => 1200,
            10 => 800,
            _ => 0,
        };
    }

    int GetMaxValue(int num)
    {
        return num switch
        {
            5 => 1600,
            3 => 1600,
            10 => 1600,
            _ => 0, 
        };
    }
    int GetStepValue(int num)
    {
        return num switch
        {
            5 => 100,
            3 => 100,
            10 => 150,
            _ => 0,
        };
    }
   
    private void OnYearSelectionChange(int value)
    {
        selectedNum = value;
    }
    int LabelOffsetX(int num)
    {
        
        return num switch
        {
            5 => 120, 
            3 => 80,
            10 => 150,
            _ => 120, 
        };
    }
}