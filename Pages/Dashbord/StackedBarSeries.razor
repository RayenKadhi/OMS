<style>
    .rz-bar-series.rz-series-0 .rz-series-data-label {
        position: absolute;
        left: 100%;
        top: 50%;
        transform: translate(5px, -50%); 
    }

    .rz-legend-item-text {
        padding: 4px;
    }
</style>

<div class="container">
    <div class="row">
        <div class="col-sm-12">

    <RadzenChart SeriesClick=@OnSeriesClick style="height: 400px" ColorScheme="ColorScheme.Divergent">
    <div class="row">
         <div class="col-md-8 d-flex align-items-end justify-content-start">
                <p class="page-title" style="font-weight: lighter; ">Top (@selectedNum) Customers</p>
        </div>
         <div class="col-md-4 d-flex align-items-end justify-content-end">
           <RadzenDropDown Style="width:95%" Data="@Number" TextProperty="Num" ValueProperty="Num" @bind-Value="selectedNum" Change="@(e => OnYearSelectionChange((int)e))" />
        </div>
        </div>

        @foreach (var num in Number)
        {
            if (selectedNum == num.Num)
            {
                <RadzenBarSeries  Data="@GetTopData(num.Num)" CategoryProperty="CustomerName"  ValueProperty="TotalPrice" Title="Spent">
                <RadzenSeriesDataLabels  Visible="true" />
                </RadzenBarSeries>
                        <RadzenValueAxis Formatter="@FormatAsDT" Min="@(GetMinValue(num.Num))" Max="@(GetMaxValue(num.Num))" Step="@(GetStepValue(num.Num))">
                    <RadzenGridLines />
                </RadzenValueAxis>
            }
        }
        <RadzenBarOptions Radius="5" Height="20" />
          <RadzenLegend Visible =false Position="LegendPosition.Right"  />
    </RadzenChart>
        </div>
    </div>
</div>

@code{

    private int selectedNum = 5;
    private Dictionary<int, List<TopFive>> topRecordsByCount = new Dictionary<int, List<TopFive>>()
    {
        { 5, null },
        { 3, null },
        { 10, null }
    };
    bool smooth = true;

    protected override async Task OnInitializedAsync()
    {
        foreach (var count in topRecordsByCount.Keys)
        {
            topRecordsByCount[count] = GetTopRecords(count);
        }
    }

    List<TopFive> GetTopRecords(int count)
    {
        string sqlQuery = $"SELECT * FROM GetTopRecordsFunction({count});";
        return dapperService.GetAll<TopFive>(sqlQuery, null);
    }

    void OnSeriesClick(SeriesClickEventArgs args)
    {

    }

    class DataItem_
    {
        public string Date { get; set; }
        public double Revenue { get; set; }
    }

   

    string FormatAsMonth(object value)
    {
        if (value != null)
        {
            return Convert.ToDateTime(value).ToString("MMM");
        }

        return string.Empty;
    }
    string FormatAsDT(object value)
    {
        double num = (double)value;
        return priceFormattingService.FormatPrice(num, "tnd");
    }

    string FormatAsUSD(object value)
    {
        double num = (double)value;

        return num.ToString("0K");
    }
   

    private class TopModel
    {
        public int Num { get; set; }
    }
    private List<TopModel> Number = new List<TopModel>
        {
            new TopModel { Num = 5 },
            new TopModel { Num = 3 },
            new TopModel { Num = 10 }
        };

    private List<TopFive> GetTopData(int count)
    {
        return topRecordsByCount.TryGetValue(count, out var topData) ? topData : new List<TopFive>();
    }
    int GetMinValue(int num)
    {
        return num switch
        {
            5 => 0,
            3 => 0,
            10 => 0,
            _ => 0,
        };
    }

    int GetMaxValue(int num)
    {
        return num switch
        {
            5 => 2000,
            3 => 2000,
            10 => 2100,
            _ => 0, 
        };
    }
    int GetStepValue(int num)
    {
        return num switch
        {
            5 => 750,
            3 => 750,
            10 => 750,
            _ => 0,
        };
    }
   
    private void OnYearSelectionChange(int value)
    {
        selectedNum = value;
    }
    int LabelOffsetX(int num)
    {
        
        return num switch
        {
            5 => 120, 
            3 => 80,
            10 => 150,
            _ => 120, 
        };
    }
}