@page "/"
@layout LoginLayout
@page "/login"


<style>
    .forget-password:hover {
        text-decoration: underline; /* Add underline on hover or customize as needed */
        cursor: pointer;
    }
    .forget-password{
        width:100%;
    }

    .rz-p-12 {
         padding:2rem !important;   
    }
</style>


<RadzenRow Gap="0" Class="rz-my-12 rz-mx-auto rz-border-radius-6 rz-shadow-10" Style="width: 100%; max-width: 800px; overflow: hidden;">
    <RadzenColumn Size="12" SizeMD="6">
        <RadzenCard Class="rz-shadow-0 rz-border-radius-0 rz-text-align-center rz-p-12 rz-background-color-base-200">
            <RadzenText TextStyle="TextStyle.DisplayH3" TagName="TagName.H2" Class="rz-color-black rz-mb-6">Welcome!</RadzenText>
            <RadzenImage Path="/Images/customer.png" Style="height: 80%; width: 100%; margin-left:1em;" />
        </RadzenCard>
    </RadzenColumn>
    <RadzenColumn Size="12" SizeMD="6">
        <RadzenCard Class="rz-shadow-0 rz-border-radius-0 rz-p-12">
            <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H2" Class="rz-mb-6">
                Login
            </RadzenText>
            @if (suspended == 1)
            {
                <div class="d-flex justify-content-center">
                    <RadzenRow Gap=".5rem">
                        <RadzenColumn Size="12" SizeSM="12">
                            <RadzenStack>
                                <p>Username</p>
                                <RadzenTextBox class="form-custom" @bind-value="@user.Username" />
                                <p class="form-labels">Password</p>
                                <RadzenPassword Visible="true" @bind-value="@user.Password" />
                            </RadzenStack>
                        </RadzenColumn>
                    </RadzenRow>
                </div>
                <div class="row">
                    <RadzenText class="forget-password" onclick="@OnResetPassword" Style="margin-top:1em; Color:#3F33FF">Forget your password ?</RadzenText>
                    <RadzenButton ButtonType="ButtonType.Submit" Text="Login" Click="@(args => HandleSubmit(user))" Icon="done" ButtonStyle="ButtonStyle.Success" class="button-save-cancel" Style="margin-top:2.5em;" />
                    <p Style="margin-top:1.5em;">Don't have an account yet?</p>
                    <RadzenButton Shade="Shade.Lighter" Text="Register" Click="@(args => OnRegistring())" Icon="launch" ButtonStyle="ButtonStyle.Danger" class="button-save-cancel" />

                </div>
            }
            else
            {
                @Message;
                <div class="d-flex justify-content-center">
                    <RadzenRow Style="margin-top:3em" Gap="1rem">
                        <RadzenColumn Size="12" SizeSM="12">
                            <RadzenStack>
                                <RadzenFormField Text="Email">
                                    <RadzenTextBox @bind-value="@user.Email" />
                                </RadzenFormField>
                            </RadzenStack>
                        </RadzenColumn>
                    </RadzenRow>
                </div>
                <div class="row">
                    <RadzenButton Disabled="@Disable" Text="Send A Confirmation Email" Click="@((args) => EmailSender(user))" Icon="done" ButtonStyle="ButtonStyle.Success" class="button-save-cancel" Style="margin-top:2em;" />
                </div>
            }

        </RadzenCard>
    </RadzenColumn>
</RadzenRow>

@code{
    bool Disable = false;
    int suspended = 1;
    List<User> users;

    string key = "UserInfo";
    User userInfo = new User();
    User user = new User();
    string Message;


    protected override async Task OnInitializedAsync()
    {
        users = await userService.ListAll();
    }



    public async Task HandleSubmit(User user)
    {
        string username = user.Username;
        string password = user.Password;

        if (string.IsNullOrEmpty(username))
        {
            WarningMessage("Username is Required");
            return;
        }

        if (string.IsNullOrEmpty(password))
        {
            WarningMessage("Password is Required");
            return;
        }

        User foundUser = users.FirstOrDefault(u => u.Username == username);
        if (foundUser != null)
        {
            if (BCrypt.Verify(password, foundUser.Password))
            {
                if (foundUser.Suspended == 1)
                {
                    userInfo.Avatar = foundUser.Avatar;
                    userInfo.UserId = foundUser.UserId;
                    userInfo.Username = username;
                    userInfo.Password = password;
                    await localStorage.SetItemAsync(key, userInfo);
                    userInfo.LastLoginDate = DateTime.Now;
                    foundUser.LastLoginDate = userInfo.LastLoginDate;
                    await userService.Update(foundUser);
                    navigationManager.NavigateTo("/home", forceLoad: true);
                }
                else
                {
                    suspended = 0;
                    Message = $"Hello {username}! To ensure the security of your account, we require your confirmation. Kindly click the link below to verify and confirm your account details. Your prompt attention to this matter is appreciated.";
                }

            }
            else
            {
                WarningMessage("Password is Invalid");
            }

        }
        else
        {

            WarningMessage("Username is Invalid");
        }


    }
    public void OnRegistring()
    {
        navigationManager.NavigateTo("/registration");
    }

    void WarningMessage(string messsage)
    {
        ShowNotification(new NotificationMessage { Summary = messsage, Duration = 4000 });
    }

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }
    void OnResetPassword()
    {
        navigationManager.NavigateTo("/resetpassword");
    }

    public async void EmailSender(User user)
    {
        if (string.IsNullOrEmpty(user.Email) || !IsValidEmail(user.Email))
        {
            WarningMessage("Provide a valid email");
            return;
        }
        if (users.FirstOrDefault(u => u.Email == user.Email) == null)
        {
            WarningMessage("Email Address Doesn't exist");
            return;
        }
        User foundUser = users.FirstOrDefault(u => u.Email == user.Email);
        try
        {
            var receiver = user.Email;
            var subject = "Account Confirmation";
            var confirmationToken = foundUser.ConfirmationToken;
            var messageBody = $"Click here to Confirm Your Account https://localhost:7131/home?token={confirmationToken}";
            await emailSender.SendEmailAsync(receiver, subject, messageBody);
            Message = "Email sent successfully!";
            SuccessMessage(Message);
           
        }
        catch
        {
        }
    }
    bool IsValidEmail(string email)
    {
        Regex emailRegex = new Regex(@"^([\w\.\-]+)@([\w\-]+)((\.(\w){2,3})+)$", RegexOptions.IgnoreCase);
        return emailRegex.IsMatch(email);
    }
    void SuccessMessage(string messsage)
    {
        ShowNotificationSuccess(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = messsage, Duration = 4000 });
    }
    void ShowNotificationSuccess(NotificationMessage message)
    {
        NotificationService.Notify(message);

    }
}



