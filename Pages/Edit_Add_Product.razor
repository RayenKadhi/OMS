@page "/Product/{id:int}"

<style>
    .rz-fileupload-files{
        background-color : unset;
    }

    .rz-fileupload-row span {
        display:none;
    }

    .rz-fileupload-row img {
        display: none;
    }

    .rz-fileupload-row button{
        display:none;
    }

    
 
</style>





<div class="rz-m-0">
    <RadzenBreadCrumb>
        <RadzenBreadCrumbItem Path="/productlist" Text="Products" />
        @{
            if (id == 0)
            {
                TitlePage = "Add Product";
                Icon = "add";
            }
            else
            {
                TitlePage = "Edit Product";
                Icon = "edit";
            }
        }
        <RadzenBreadCrumbItem Text=@TitlePage>
            <ChildContent>
                <div style="display: flex; align-items: center;">
                    <RadzenIcon Icon=@Icon Style="margin-right: 8px;" />
                    @TitlePage
                </div>
            </ChildContent>
        </RadzenBreadCrumbItem>
    </RadzenBreadCrumb>

</div>
@{
    if (id == 0)
    {
        TitlePage = "Add Product";

    }
    else
    {
        TitlePage = "Edit Product";

    }
    
}
<p style="font-size: 1.2em; margin-top:.5em;
        font-weight: bold;">@TitlePage </p>
<RadzenCard class="rz-background-color-white rz-color-black rz-shadow-0 rz-border-radius-0 rz-p-8" style="margin: 0rem; margin-top: .5em;">
<div class="container">
    <div class="row">
        <div class="col-lg-4 col-md-12">

            <RadzenStack>
                    <RadzenColumn Size="12" SizeSM="6" >
                        <RadzenFileInput @bind-Value=@product.Picture @bind-FileName=@fileName TValue="string"
                        Change=@(args => OnChange(args, "FileInput")) Error=@(args => OnError(args, "FileInput")) />
                    <RadzenImage Path="@(!string.IsNullOrEmpty(product.Picture) ? product.Picture : "Images/Product.png")"
                                 Style="width: 12rem;" />
                    </RadzenColumn>
                </RadzenStack>
            
        </div>
        <div class="col-lg-8 col-md-12">
        
                            <RadzenFormField Style="width:100%;margin-bottom:1em;" Text="Product..">
                                        <RadzenTextBox Placeholder="Product.." @bind-Value=@product.ProductName />
                                    </RadzenFormField>
                            <RadzenRow Gap="1rem">
                                <RadzenColumn Size="12" SizeSM="6">
                                    <RadzenStack>
                                                <RadzenFormField Text="Category *">
                                <RadzenDropDown @bind-Value="@product.CategoryId" Data="@CategoryNames" TextProperty="CategoryName" ValueProperty="CategoryId" />
                                                </RadzenFormField>
                                    <RadzenFormField Text="Unit Price..">
                                        <RadzenNumeric Placeholder="Unit Price.."  ShowUpDown="true" @bind-Value=@product.UnitPrice />
                                    </RadzenFormField>
                            <RadzenFormField Text="Initial Quantity..">
                                <RadzenNumeric Placeholder="Initial Quantity.." ShowUpDown="true" @bind-Value=@product.InitialQuantity />
                            </RadzenFormField>
                                    </RadzenStack>
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeSM="6">
                                    <RadzenStack>
                                        <RadzenFormField Text="Brand *">
                                            <RadzenDropDown Data="@BrandNames" @bind-Value="@product.BrandId" TextProperty="BrandName" ValueProperty="BrandId" />
                                        </RadzenFormField>
                                        <RadzenFormField Text="Threshold">
                                            <RadzenNumeric Placeholder="Threshold.." ShowUpDown="true" @bind-Value=@product.Threshold />
                                        </RadzenFormField>
                                          <RadzenFormField Text="Availability">
                                            <div class="Available-custom-box">
                                                <p>Availability: </p>
                                    <RadzenSwitch @bind-Value=@Availability Change=@(args => OnChange(args, "Switch")) />
                                            </div>
                                        </RadzenFormField>
                                    </RadzenStack>
                                </RadzenColumn>
                            </RadzenRow>
                                    <RadzenFormField Text="Description.." Style="width:100%">
                                        <RadzenTextArea Placeholder="Description.." @bind-Value=@product.Description />
                                    </RadzenFormField>
                                    

                            <div class="custom-button-group">
                                <RadzenButton Text="Save" Icon="save" Click="@((args) => SaveProduct(product))" ButtonStyle="ButtonStyle.Success" class="button-save-cancel" />
                                        <RadzenButton Text="Cancel" Icon="cancel" Click="@CancelAdd" ButtonStyle="ButtonStyle.Danger" class="button-save-cancel"/>
                            </div>
        
    </div>
        
        </div>
</div>
</RadzenCard>
@code {
    string TitlePage;
    string Icon;
    string fileName;
    long? fileSize;
    [Parameter]
    public int id { get; set; }
    Product product = new Product();
    List<Product> products;

    private string searchTerm;
    private string SearchTerm
    {
        get { return searchTerm; }
        set { searchTerm = value; }
    }
    int totalRecords;
    string sortColumnName = "ProductId";
    string sortDir = "DESC";
    IEnumerable<Brand> BrandNames;
    IEnumerable<Category> CategoryNames;
    bool Availability;
    protected override async Task OnInitializedAsync()
    {

        id = int.Parse(navigationManager.Uri.Split('/').Last());
        if (id != 0)
        {
            product = await productService.GetByIdDetail(id);
        }

        if (product == null)
        {
            navigationManager.NavigateTo("/NotFound");
            return;
        }
        products = await productService.ListAll(sortColumnName, sortDir, searchTerm);
        BrandNames = products.GroupBy(b => b.BrandId).
        Select(group => group.First()).
        Select(b => new Brand { BrandId = b.BrandId, BrandName = b.BrandName }).
        Distinct();
        CategoryNames = products.GroupBy(c => c.CategoryId).Select(group => group.First()).Select(c => new Category { CategoryId = c.CategoryId, CategoryName = c.CategoryName });
        Availability = product.Available ? true : false;
    }


    async Task SaveProduct(Product product)
    {
        if (string.IsNullOrEmpty(product.ProductName))
        {
            WarningMessage("Product Name is Required");
            return;
        }
        if (products.FirstOrDefault(p => p.ProductName == product.ProductName && p.ProductId != product.ProductId) != null)
        {
            WarningMessage("Product Name already exists");
            return;
        }
        if (product.CategoryId == 0)
        {
            WarningMessage("Category is Required");
            return;
        }

        if (product.BrandId == 0)
        {
            WarningMessage("Brand is Required");
            return;
        }
        if (product.UnitPrice < 0)
        {
            WarningMessage("Unit Price Must Be Positive");
            return;
        }
        if (product.Threshold < 0)
        {
            WarningMessage("Threshold Is Invalid");
            return;
        }
        if (product.InitialQuantity < 0)
        {
            WarningMessage("Initial Quantity Is Invalid");
            return;
        }
        if (id != 0)
        {
            await productService.Update(product);
        }
        else
        {
            await productService.Create(product);
        }

        SuccessMessage("Product is successfully edited");
        navigationManager.NavigateTo("/productlist");
    }

    void WarningMessage(string messsage)
    {
        ShowNotification(new NotificationMessage { Summary = messsage, Duration = 4000 });
    }

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);

    }
    void SuccessMessage(string messsage)
    {
        ShowNotificationSuccess(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = messsage, Duration = 4000 });
    }
    void ShowNotificationSuccess(NotificationMessage message)
    {
        NotificationService.Notify(message);

    }
    void CancelAdd()
    {
        navigationManager.NavigateTo("/productlist");
    }
  

    void OnChange(string value, string name)
    {
    }

    void OnError(UploadErrorEventArgs args, string name)
    {
    }
    void OnChange(bool? value, string name)
    {
    }
    
   
}






