

<RadzenCard class="rz-background-color-white rz-color-black rz-shadow-0 rz-border-radius-0 rz-p-8" style="margin: 0rem; border : 1px solid #ebebeb;">
    <div class="container">
        <p class="page-title" style="font-weight: lighter; display:flex; justify-content:center;">Order Revenue Per Year</p>
        <div class="row">
            <div class="col-sm-12 my-5">
                <div class="d-flex flex-row-reverse">


                    <RadzenDropDown Data="@years" TextProperty="Year" ValueProperty="Year" @bind-Value="selectedYear" Change="@(e => OnYearSelectionChange((int)e))" />
                </div>
                
                <RadzenChart>
                    @foreach (var Y in years)
                    {
                      if (selectedYear == Y.Year)
                    {
                            <RadzenLineSeries Smooth="@smooth" Data="@GetRevenueData(Y.Year)" CategoryProperty="FormattedOrderDate" Title="@selectedYear.ToString()" ValueProperty="Revenue">
                            <RadzenMarkers MarkerType="MarkerType.Circle" />
                            <RadzenSeriesDataLabels Visible="false"/>
                        </RadzenLineSeries>
                    }
                    }
                    <RadzenCategoryAxis Padding="0" Formatter="@FormatAsMonth" />
                    <RadzenValueAxis Formatter="@FormatAsDT">
                        <RadzenGridLines Visible="true" />
                        <RadzenAxisTitle Text="Revenue in DT" />
                    </RadzenValueAxis>
                </RadzenChart>
            </div>
        </div>
    </div>
</RadzenCard>


@code{
    private int selectedYear = 2022;
    bool smooth = true;
    private Dictionary<int, List<RevenueData>> revenueDataByYear = new Dictionary<int, List<RevenueData>>();

    protected override async Task OnInitializedAsync()
    {
        for (int year = 2020; year <= 2022; year++)
        {
            revenueDataByYear[year] = GetYear(year);
        }
    }
    List<RevenueData> GetYear(int year)
    {
        string sqlQuery = $"SELECT * FROM GetRevenueDataFunction({year});";
        return dapperService.GetAll<RevenueData>(sqlQuery, null);
    }

    string FormatAsDT(object value)
    {
        return priceFormattingService.FormatPrice((double)value, "tnd");
    }
    
    private void OnYearSelectionChange(int value)
    {
        selectedYear = value;
    }
    string FormatAsMonth(object value)
    {
        if (value != null)
        {
            CultureInfo englishCulture = new CultureInfo("en-US");
            return Convert.ToDateTime(value).ToString("MMM", englishCulture);
        }

        return string.Empty;
    }
    private class YearModel
    {
        public int Year { get; set; }
    }
    private List<YearModel> years = new List<YearModel>
        {
            new YearModel { Year = 2022 },
             new YearModel { Year = 2021 },
            new YearModel { Year = 2020 }
        };
    List<RevenueData> GetRevenueData(int year)
    {
        if (revenueDataByYear.TryGetValue(year, out var revenueData))
        {
            return revenueData;
        }
        return new List<RevenueData>();
    }
    
}