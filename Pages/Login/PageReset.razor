@layout ResetLayout
@page "/Reset-password"


<RadzenRow Gap="0" Class="rz-my-12 rz-mx-auto rz-border-radius-6 rz-shadow-10" Style="width: 100%; max-width: 800px; overflow: hidden;">
    <RadzenColumn Size="12" SizeMD="6">
        <RadzenCard class="card"  Style="height: 100%;">
            <RadzenText TextStyle="TextStyle.DisplayH3" TagName="TagName.H2" Class="rz-color-black rz-mb-6">Welcome!</RadzenText>
            <RadzenImage Path="/Images/customer.png" Style="height: 80%; width: 100%; margin-left:1em;" />
        </RadzenCard>
    </RadzenColumn>
    <RadzenColumn Size="12" SizeMD="6">
        <RadzenCard class="card" >
            <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H2" Class="rz-mb-6">
                Password Reset
            </RadzenText>
            <div class="d-flex justify-content-center">
                <RadzenRow Gap="1rem">
                    <RadzenColumn Size="12" SizeSM="12">
                        <RadzenStack>
                            <p class="form-label">New Password</p>
                            <RadzenPassword Visible="true" @bind-Value=user.NewPassword />
                            <p class="form-label">Confirm Password</p>
                            <RadzenPassword Visible="true" @bind-Value=user.ConfirmPassword />
                        </RadzenStack>
                    </RadzenColumn>
                </RadzenRow>
            </div>
            <div class="row" style="margin-top:2em;">
                <RadzenButton Text="Confirm" Icon="done" Click="(args)=>PasswordReset(user)" ButtonStyle="ButtonStyle.Success" class="button-save-cancel" Style="margin-top:2em;" />
                <RadzenButton Text="Login"  Click="@Navigation" ButtonStyle="ButtonStyle.Success" class="button-save-cancel" Style="margin-top:2em" />
            </div>
        </RadzenCard>
    </RadzenColumn>
</RadzenRow>

@code {
    List<User> users;
    User user = new User();
    User foundUser = new User();
    protected override async Task OnInitializedAsync()
    {
        users = await userService.ListAll();
        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
        var Token = QueryHelpers.ParseQuery(uri.Query).TryGetValue("Token", out var parsedCode) ? parsedCode.ToString() : null;
        foundUser = users.FirstOrDefault(u => u.ConfirmationToken == Token);
        TimeSpan DifferenceTime = DateTime.Now - foundUser.EmailSent;
        if (foundUser == null || DifferenceTime.Minutes >=30)
        {
            navigationManager.NavigateTo("/login");
        }
    }
    public void Navigation()
    {
        navigationManager.NavigateTo("/login");
    }
    public async void PasswordReset(User user)
    {
        if (string.IsNullOrEmpty(user.NewPassword) || !IsValidPassword(user.NewPassword))
        {
            WarningMessage("Password must be with minimum eight characters, at least one letter and one number");
            return;
        }
        if (user.ConfirmPassword != user.NewPassword)
        {
            WarningMessage("Password is Not Correct");
            return;
        }
        SuccessMessage("Password Has Successfully Changed");
        string passwordHash = BCrypt.HashPassword(user.NewPassword);
        user.Password = passwordHash;
        user.LastLoginDate = foundUser.LastLoginDate;
        user.EmailSent = foundUser.EmailSent;
        await userService.Update(user);
        navigationManager.NavigateTo("/login");
    }
    void WarningMessage(string messsage)
    {
        ShowNotification(new NotificationMessage { Summary = messsage, Duration = 4000 });
    }

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }
    bool IsValidPassword(string password)
    {
        Regex passwordRegex = new Regex(@"^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{8,}$", RegexOptions.IgnoreCase);
        return passwordRegex.IsMatch(password);
    }
    void SuccessMessage(string messsage)
    {
        ShowNotificationSuccess(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = messsage, Duration = 4000 });
    }
    void ShowNotificationSuccess(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }
   
}