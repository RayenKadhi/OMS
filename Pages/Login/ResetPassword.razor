@layout ResetLayout

@page "/resetpassword"
<style>
    .rz-form-field-content {
        width: 90%;
        margin-right: 2em;
    }
</style>
<RadzenRow Gap="0" Class="rz-my-12 rz-mx-auto rz-border-radius-6 rz-shadow-10" Style="width: 100%; max-width: 800px; overflow: hidden;">
    <RadzenColumn Size="12" SizeMD="6">
        <RadzenCard class="card" Style="height:100%">
            <RadzenText TextStyle="TextStyle.DisplayH3" TagName="TagName.H2" Class="welcome-text">Welcome!</RadzenText>
            <RadzenImage Path="/Images/customer.png" Style="height: 100%; width: 100%; margin-left:1em;" />
        </RadzenCard>
    </RadzenColumn>
    <RadzenColumn Size="12" SizeMD="6">
        <RadzenCard class="card" Style="height:100%">
            <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H2" Class="login-title">
                Password Reset
            </RadzenText>
            <RadzenText Style="margin-top:2em;">Hello User! To ensure the security of your account, we require your confirmation. Kindly enter your email below to verify and confirm your account details. Your prompt attention to this matter is appreciated.</RadzenText>
            <div class="d-flex justify-content-center">
                <RadzenRow Gap="1rem">
                    <RadzenColumn Size="12" SizeSM="12">
                        <RadzenStack>
                            <RadzenFormField Text="Email" Style="margin-top:3em;">
                                <RadzenTextBox Style="width:100%" @bind-value="@user.Email" />
                            </RadzenFormField>
                        </RadzenStack>
                    </RadzenColumn>
                </RadzenRow>
            </div>
            <div class="row" style="margin-top:3em;">
                <RadzenButton Text="Send A Confirmation Email" Click="@((args) => EmailSender(user))" Icon="send" ButtonStyle="ButtonStyle.Success" class="send-email" Style="margin-top:2em;" />
                <RadzenButton Text="Login" Click="@Navigation" ButtonStyle="ButtonStyle.Success" class="login-button" Style="margin-top:2em" />
            </div>
        </RadzenCard>
    </RadzenColumn>
</RadzenRow>

@code{
    private string Message { get; set; }
    List<User> users;
    User user = new User();
    protected override async Task OnInitializedAsync()
    {
        users = await userService.ListAll();
    }
    public async void EmailSender(User user)
    {
        if (string.IsNullOrEmpty(user.Email) || !IsValidEmail(user.Email))
        {
            WarningMessage("Provide a valid email");
            return;
        }
        if(users.FirstOrDefault(u => u.Email == user.Email) == null)
        {
            WarningMessage("Email Address Doesn't exist");
            return;
        }
        User foundUser = users.FirstOrDefault(u => u.Email == user.Email);


        // Email Confirmation ------------------------------------------------------------------------------------->
        var receiver = user.Email;
        var subject = "Reset Password";
        var confirmationLink = $"https://localhost:7131/Reset-password?Token={foundUser.ConfirmationToken}";
        var messageBody = $"Click <a href=\"{confirmationLink}\">here</a> to reset your password.";
        await emailSender.SendEmailAsync(receiver, subject, messageBody);
        Message = "Email sent successfully!";
        SuccessMessage(Message);
        foundUser.EmailSent = DateTime.Now;
        foundUser.LastLoginDate = foundUser.LastLoginDate;
        await userService.Update(foundUser);
        // Email Confirmation ------------------------------------------------------------------------------------->
    }

    public void Navigation()
    {
        navigationManager.NavigateTo("/login");
    }
    bool IsValidEmail(string email)
    {
        Regex emailRegex = new Regex(@"^([\w\.\-]+)@([\w\-]+)((\.(\w){2,3})+)$", RegexOptions.IgnoreCase);
        return emailRegex.IsMatch(email);
    }
    void WarningMessage(string messsage)
    {
        ShowNotification(new NotificationMessage { Summary = messsage, Duration = 4000 });
    }

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }
    void SuccessMessage(string messsage)
    {
        ShowNotificationSuccess(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = messsage, Duration = 4000 });
    }
    void ShowNotificationSuccess(NotificationMessage message)
    {
        NotificationService.Notify(message);

    }
    

}