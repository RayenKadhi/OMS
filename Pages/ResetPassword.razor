@layout ResetLayout

@page "/resetpassword"

<RadzenRow Gap="0" Class="rz-my-12 rz-mx-auto rz-border-radius-6 rz-shadow-10" Style="width: 100%; max-width: 800px; overflow: hidden;">
    <RadzenColumn Size="12" SizeMD="6">
        <RadzenCard Class="rz-shadow-0 rz-border-radius-0 rz-text-align-center rz-p-12 rz-background-color-base-200">
            <RadzenText TextStyle="TextStyle.DisplayH3" TagName="TagName.H2" Class="rz-color-black rz-mb-6">Welcome!</RadzenText>
            <RadzenImage Path="/Images/customer.png" Style="height: 80%; width: 100%; margin-left:1em;" />
        </RadzenCard>
    </RadzenColumn>
    <RadzenColumn Size="12" SizeMD="6">
        <RadzenCard Class="rz-shadow-0 rz-border-radius-0 rz-p-12">
            <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H2" Class="rz-mb-6">
                Password Reset
            </RadzenText>
            <div class="d-flex justify-content-center">
                <RadzenRow Gap="1rem">
                    <RadzenColumn Size="12" SizeSM="12">
                        <RadzenStack>
                            <RadzenFormField Text="Email">
                                <RadzenTextBox @bind-value="@user.Email" />
                            </RadzenFormField>
                        </RadzenStack>
                    </RadzenColumn>
                </RadzenRow>
            </div>
            <div class="row" style="margin-top:5em;">
                <RadzenButton Text="Send A Confirmation Email" Click="@((args) => EmailSender(user))" Icon="done" ButtonStyle="ButtonStyle.Success" class="button-save-cancel" Style="margin-top:2em;" />
                <RadzenButton Text="Return" Click="@Navigation" Icon="cancel" ButtonStyle="ButtonStyle.Danger" class="button-save-cancel" Style="margin-top:2em"/>
            </div>
        </RadzenCard>
    </RadzenColumn>
</RadzenRow>

@code{
    private string Message { get; set; }
    List<User> users;
    User user = new User();
    protected override async Task OnInitializedAsync()
    {
        users = await userService.ListAll();
    }
    public async void EmailSender(User user)
    {
        if (string.IsNullOrEmpty(user.Email) || !IsValidEmail(user.Email))
        {
            WarningMessage("Provide a valid email");
            return;
        }
        if(users.FirstOrDefault(u => u.Email == user.Email) == null)
        {
            WarningMessage("Email Address Doesn't exist");
            return;
        }
        User foundUser = users.FirstOrDefault(u => u.Email == user.Email);
    
        
        try
        {
            var receiver = user.Email;
            var subject = "Reset Password";
            var messageBody = $"Click here to Reset Your Password https://localhost:7131/Reset-password/{foundUser.UserId}";

            // Use the injected service to send the email
            await emailSender.SendEmailAsync(receiver, subject, messageBody);

            Message = "Email sent successfully!";
            SuccessMessage(Message);
        }
        catch (Exception ex)
        {
            Message = $"Error: {ex.Message}";
            WarningMessage($"Error: {ex.Message}");
        }
    }

    public void Navigation()
    {
        navigationManager.NavigateTo("/login");
    }
    bool IsValidEmail(string email)
    {
        Regex emailRegex = new Regex(@"^([\w\.\-]+)@([\w\-]+)((\.(\w){2,3})+)$", RegexOptions.IgnoreCase);
        return emailRegex.IsMatch(email);
    }
    void WarningMessage(string messsage)
    {
        ShowNotification(new NotificationMessage { Summary = messsage, Duration = 4000 });
    }

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }
    void SuccessMessage(string messsage)
    {
        ShowNotificationSuccess(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = messsage, Duration = 4000 });
    }
    void ShowNotificationSuccess(NotificationMessage message)
    {
        NotificationService.Notify(message);

    }
    

}