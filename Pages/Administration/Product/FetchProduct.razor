@page "/productlist"



<style>

	.rz-grid-table td .rz-cell-data {
		color: unset;
	}



	.rz-card {
		padding: 0;
	}

	.form-labels {
		margin-top: 0em;
	}

	.rz-p-md-12 {
		padding: 1rem !important;
	}
</style>


@if (search)
{
	<RadzenCard class="card" Style="margin-bottom:1em;">
		<p class="page-title" style="padding-left:1em; padding-top:1em;">Advanced Search</p>
		<div Class="rz-p-0 rz-p-md-12">
			<p class="form-labels" style="width:100%; margin-bottom: .5em;">Product | Barcode</p>
			<RadzenTextBox style="margin-bottom:1em;width: 100%;" @bind-Value="@productSearch.ProductNameOrBarcode" />
			<RadzenRow Gap=".5rem">
				<RadzenColumn Size="12" SizeSM="6">
					<RadzenStack>
						<p class="form-labels">Category</p>
						<RadzenDropDown @bind-Value=@productSearch.SelectedCategories Data=@CategoryNames TextProperty="CategoryName" ValueProperty="CategoryId"
										Multiple=true SelectAllText="Select all categories" AllowClear=true Placeholder="Category"
										MaxSelectedLabels="@totalRecords" SelectedItemsText="are now selected" />

						<p class="form-labels">Min Unit Price</p>
						<RadzenNumeric Min="0" @bind-Value="@productSearch.MinUnitPrice" />

						<p class="form-label">Min Initial Quantity</p>
						<RadzenNumeric Min="0" @bind-Value="@productSearch.MinIntialQuantity" />
						<p class="form-label">Min Threshold</p>
						<RadzenNumeric Min="0" @bind-Value="@productSearch.MinThreshold" />
						<div style="display:flex; justify-content:left;align-items:center;">
							<RadzenCheckBox TriState=true @bind-Value=@productSearch.Available Name="Available" />
							<RadzenLabel Style="margin-left: 1em;" Text="Available" Component="Available" />
						</div>
					</RadzenStack>
				</RadzenColumn>
				<RadzenColumn Size="12" SizeSM="6">
					<RadzenStack>
						<p class="form-labels">Brand</p>
						<RadzenDropDown @bind-Value=@productSearch.SelectedBrands Data=@BrandNames TextProperty="BrandName" ValueProperty="BrandId"
										Multiple=true SelectAllText="Select all brands" AllowClear=true Placeholder="Brands"
										MaxSelectedLabels="@totalRecords" SelectedItemsText="are now selected" />
						<p class="form-label">Max Unit Price</p>
						<RadzenNumeric Min="0" @bind-Value="@productSearch.MaxUnitPrice" />
						<p class="form-label">Max Initial Quantity</p>
						<RadzenNumeric Min="0" @bind-Value="@productSearch.MaxIntialQuantity" />
						<p class="form-label">Max Threshold</p>
						<RadzenNumeric Min="0" @bind-Value="@productSearch.MaxThreshold" />
					</RadzenStack>
				</RadzenColumn>
			</RadzenRow>

			<div class="d-flex flex-row-reverse">
				<div class="p-2">
					<RadzenButton Icon="search" class="search-button" Text="Search" Click="PerformSearch" />
				</div>
				<div class="p-2">
					<RadzenButton Text="Cancel" Icon="cancel" Click="@(()=>Cancel())" ButtonStyle="ButtonStyle.Danger" class="cancel-button" />
				</div>
				<div class="p-2">
					<RadzenButton Text="Clear" Icon="clear" ButtonStyle="ButtonStyle.Dark" Click="@(()=>Clear())" class="clear-button" />
				</div>
			</div>

		</div>


	</RadzenCard>
}

<div class="row">
	<div class="col-md-3 d-flex align-items-end justify-content-start">
		@if (count != 0)
		{
			<h3 class="page-title"> Products: @count </h3>
		}
		else
		{
			<h3 class="page-title"> Products: @totalRecords </h3>
		}
	</div>
	<div class="col-md-9 d-flex align-items-end justify-content-end">
		<RadzenButton hidden="@hidden" Text="Search" Icon="search" Click="@(()=>Search())" class="search-button" Style="margin-right:5px" />
		<RadzenButton class="add-button" Click="@(()=> Navigation(product))" Text="Add" Icon="add_circle_outline" Style="margin-right:5px"></RadzenButton>
		<RadzenButton Text="Export" Click="@(() => Export(products))" Icon="grid_on" class="export-button" />
	</div>
</div>



@if (products == null)
{
	<p><em>Loading...</em></p>
}
else
{

	<RadzenDataGrid @ref="productGrid" Density="Density.Compact" AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="16" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
					Data="@products" TItem="Product" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" RowCreate="@OnCreateRow" RowUpdate="@OnUpdateRow" RowRender="@RowRender" Style="margin-top:20px;">
		<Columns>
			<RadzenDataGridColumn TItem="Product" Property="ProductName" Title="Product" Width="160px">
				<Template Context="products">
					<RadzenImage Path="@($"{products.Picture}")" style="width: 30px; height: 30px; margin-right: 6px;" />
					@products.ProductName
				</Template>
			</RadzenDataGridColumn>
			<RadzenDataGridColumn TItem="Product" Property="BrandName" Title="Brand" Width="160px">
			</RadzenDataGridColumn>
			<RadzenDataGridColumn TItem="Product" Property="CategoryName" Title="Category" Width="160px">
			</RadzenDataGridColumn>
			<RadzenDataGridColumn TItem="Product" Property="Unit Price" Title="Unit Price" Frozen="true" Width="200px">
				<Template Context="products">
					@priceFormattingService.FormatPrice(products.UnitPrice, "tnd")
				</Template>
			</RadzenDataGridColumn>
			<RadzenDataGridColumn TItem="Product" Property="InitialQuantity" Title="Initial Quantity" Width="130px">
			</RadzenDataGridColumn>
			<RadzenDataGridColumn TItem="Product" Property="Threshold" Title="Threshold" Width="130px">
			</RadzenDataGridColumn>

			<RadzenDataGridColumn TItem="Product" Property="Description" Title="Description" Frozen="true" Width="130px">
			</RadzenDataGridColumn>
			<RadzenDataGridColumn TItem="Product" Filterable="false" Sortable="false" Width="100px">
				<Template Context="product">
					<RadzenButton ButtonStyle="ButtonStyle.Light" Icon="edit" Size="ButtonSize.ExtraSmall" class="small-edit-button" Click="@((args) => Navigation(product))">
					</RadzenButton>
					<RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Size="ButtonSize.ExtraSmall" class="small-delete-button" Click="@(args => ShowInlineDialog(product))">
					</RadzenButton>
				</Template>
			</RadzenDataGridColumn>

		</Columns>
	</RadzenDataGrid>


	@implements IDisposable
	@code {

	List<Product> products;

	string text;
	public bool isAvailable = true;
	public Product product = new Product();

	RadzenDataGrid<Product> productGrid;
	private string searchTerm;
	private string SearchTerm
	{
		get { return searchTerm; }
		set { searchTerm = value; }
	}
	void OnCreateRow(Product product)
	{
		productService.Create(product);
	}
	void OnUpdateRow(Product product)
	{
		productService.Update(product);

	}

	int totalRecords;
	string sortColumnName = "ProductId";
	string sortColumnNameB = "BrandId";
	string sortDir = "DESC";
	IEnumerable<Brand> BrandNames;
	IEnumerable<Category> CategoryNames;
	protected override async Task OnInitializedAsync()
	{
		totalRecords = await productService.Count();
		products = await productService.ListAll(sortColumnName, sortDir, searchTerm);
		BrandNames = products.OrderBy(b => b.BrandName).GroupBy(b => b.BrandId).
		Select(group => group.First()).
		Select(b => new Brand { BrandId = b.BrandId, BrandName = b.BrandName }).
		Distinct();
		CategoryNames = products.OrderBy(c => c.CategoryName).GroupBy(c => c.CategoryId)
	.Select(group => group.First())
	.Select(c => new Category { CategoryId = c.CategoryId, CategoryName = c.CategoryName })
	.Distinct();

	}




	public void Dispose()
	{
		if (dialogService != null && dialogService.Close != null)
		{
			dialogService.Close();
		}
	}


	async Task Delete(Product product)
	{

		if (product == null)
		{
			return;
		}
		try
		{
			await productService.Delete(product.ProductId);
			dialogService.Close(true);
			await OnInitializedAsync();

		}
		catch (SqlException ex)
		{
			if (ex.Number == 547)
			{
				WarningMessage($"Product {product.ProductName} has associated orders. You cannot delete this product.");
			}
		}
	}

	async Task ShowInlineDialog(Product product)
	{
		var result = await dialogService.OpenAsync("Confirmation", ds =>
	@<RadzenStack Gap="1.5rem">
		<p>Are you sure to delete <b>@product.ProductName</b> from your list?</p>
		<div class="custom-button-group">
			<RadzenButton Text="Ok" Click="((args) => Delete(product))" Style="width: 80px;" ButtonStyle="ButtonStyle.Success" />
			<RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Danger" />
		</div>
	</RadzenStack>
	);
	}
	void ShowNotification(NotificationMessage message)
	{
		NotificationService.Notify(message);

	}
	void WarningMessage(string messsage)
	{
		ShowNotification(new NotificationMessage { Summary = messsage, Duration = 4000 });
	}
	public void Navigation(Product product)
	{
		navigationManager.NavigateTo($"/Product/{product.ProductId}");

	}

	void warningMessage(string message)
	{
		ShowNotification(new NotificationMessage { Summary = message, Duration = 4000 });
	}
	string isAvailableClass(byte available)
	{
		return available == 0 ? "highlight" : string.Empty;
	}
	void RowRender(RowRenderEventArgs<Product> args)
	{
		args.Attributes.Add("style", $"color: {(!args.Data.Available ? "#ababab" : "unset")};");
	}

	// Advanced Search ------------------------------------------------------------------------------------------------------->

	ProductSearch productSearch = new ProductSearch();

	int Availability;
	int count;


	void PerformSearch()
	{

		string SqlQuery = "";
		string SqlQuery_ = "SELECT * FROM Product p LEFT JOIN Brand b ON p.BrandId = b.BrandId LEFT JOIN Category c ON c.CategoryId = p.CategoryId WHERE 1=1";

		var parameters = new DynamicParameters();

		if (!string.IsNullOrEmpty(productSearch.ProductNameOrBarcode))
		{
			SqlQuery += $" AND (ProductName LIKE '%{productSearch.ProductNameOrBarcode}%' OR Barcode = '{productSearch.ProductNameOrBarcode}')";
			// parameters.Add("ProductNameOrBarcode", $"%{productSearch.ProductNameOrBarcode}%");
		}

		if (productSearch.SelectedCategories != null && productSearch.SelectedCategories.Any())
		{
			SqlQuery += " AND p.CategoryId IN @SelectedCategories";
			parameters.Add("SelectedCategories", productSearch.SelectedCategories);
		}
		if (productSearch.SelectedBrands != null && productSearch.SelectedBrands.Any())
		{
			SqlQuery += $" AND p.BrandId IN ({string.Join(",", productSearch.SelectedBrands)})";
			parameters.Add("SelectedBrands", productSearch.SelectedBrands);

		}
		if (productSearch.Available.HasValue)
		{
			SqlQuery += " AND Available = @Availability";
			parameters.Add("Availability", productSearch.Available.Value);
		}
		if (!string.IsNullOrEmpty(productSearch.MinUnitPrice))
		{
			SqlQuery += $" AND  UnitPrice >= {int.Parse(productSearch.MinUnitPrice)}";
			parameters.Add("MinUnitPrice", productSearch.MinUnitPrice);
		}
		if (!string.IsNullOrEmpty(productSearch.MaxUnitPrice))
		{
			SqlQuery += $" AND  UnitPrice <= {int.Parse(productSearch.MaxUnitPrice)}";
			parameters.Add("MaxUnitPrice", productSearch.MaxUnitPrice);
		}
		if (!string.IsNullOrEmpty(productSearch.MinIntialQuantity))
		{
			SqlQuery += $" AND  InitialQuantity >= {int.Parse(productSearch.MinIntialQuantity)}";
			parameters.Add("MinIntialQuantity", productSearch.MinIntialQuantity);
		}
		if (!string.IsNullOrEmpty(productSearch.MaxIntialQuantity))
		{
			SqlQuery += $" AND  InitialQuantity <= {int.Parse(productSearch.MaxIntialQuantity)}";
			parameters.Add("MaxIntialQuantity", productSearch.MaxIntialQuantity);
		}
		if (!string.IsNullOrEmpty(productSearch.MinThreshold))
		{
			SqlQuery += $" AND  Threshold >= {int.Parse(productSearch.MinThreshold)}";
			parameters.Add("MinThreshold", productSearch.MinThreshold);
		}
		if (!string.IsNullOrEmpty(productSearch.MaxThreshold))
		{
			SqlQuery += $" AND  Threshold <= {int.Parse(productSearch.MaxThreshold)}";
			parameters.Add("MaxThreshold", productSearch.MaxThreshold);
		}
		search = false;
		hidden = false;
		products = dapperService.GetAll<Product>(SqlQuery_ + SqlQuery, parameters);
		string countQuery = "SELECT COUNT(*) FROM (SELECT DISTINCT p.ProductId FROM Product p LEFT JOIN Brand b ON p.BrandId = b.BrandId LEFT JOIN Category c ON c.CategoryId = p.CategoryId WHERE 1=1";

		count = dapperService.ExecuteScalar<int>(countQuery + SqlQuery + ") AS Count", parameters);

	}


	bool hidden = false;
	bool search = false;

	public bool Search()
	{
		search = true;
		hidden = true;
		return search;
	}
	public bool Cancel()
	{
		search = false;
		hidden = false;
		return search;

	}
	public void Clear()
	{
		if (!string.IsNullOrEmpty(productSearch.ProductNameOrBarcode))
		{
			productSearch.ProductNameOrBarcode = "";
		}
		if (productSearch.SelectedCategories != null && productSearch.SelectedCategories.Any())
		{
			productSearch.SelectedCategories = new List<int>();
		}

		if (productSearch.SelectedBrands != null && productSearch.SelectedBrands.Any())
		{
			productSearch.SelectedBrands = new List<int>();
		}
		if (!string.IsNullOrEmpty(productSearch.MinUnitPrice))
		{
			productSearch.MinUnitPrice = "";
		}
		if (!string.IsNullOrEmpty(productSearch.MaxUnitPrice))
		{
			productSearch.MaxUnitPrice = "";
		}
		if (!string.IsNullOrEmpty(productSearch.MinIntialQuantity))
		{
			productSearch.MinUnitPrice = "";
		}
		if (!string.IsNullOrEmpty(productSearch.MaxIntialQuantity))
		{
			productSearch.MaxIntialQuantity = "";
		}
		if (!string.IsNullOrEmpty(productSearch.MinIntialQuantity))
		{
			productSearch.MinIntialQuantity = "";
		}
		if (!string.IsNullOrEmpty(productSearch.MinThreshold))
		{
			productSearch.MinThreshold = "";
		}
		if (!string.IsNullOrEmpty(productSearch.MaxThreshold))
		{
			productSearch.MaxThreshold = "";
		}
	}
	private void Export(List<Product> data)
	{
		JSRuntime.InvokeVoidAsync("exportToExcel", data);
	}


    }

}
